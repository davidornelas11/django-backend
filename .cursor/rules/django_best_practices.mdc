---
description: Helpful for writing code specific to Django
globs: 
alwaysApply: false
---
---
description: Rules for Django best practices, emphasizing common patterns and security.
globs: ["**/*.py"] # Apply these rules to all Python files
alwaysApply: true
---

# Django Best Practices for AI Agent

This file outlines best practices and common patterns for Django development to guide the AI agent.

## General Guidelines

* **Follow PEP 8:** Adhere strictly to PEP 8 guidelines for Python code style.
* **Use Django ORM:** Prefer Django's ORM for database interactions. Avoid raw SQL queries unless absolutely necessary and properly sanitized.
* **Class-Based Views (CBV) over Function-Based Views (FBV):** For complex views, prefer CBVs for better organization and reusability. Use FBVs for simpler, straightforward views.
* **Separate Concerns:** Ensure clear separation of concerns (models, views, templates, forms, serializers).
* **Configuration:** Keep `settings.py` clean and use environment variables for sensitive data (e.g., `SECRET_KEY`, database credentials).

## Model Layer

* **Meaningful Model Names:** Use singular, capitalized names for models (e.g., `Product`, `Order`).
* **`__str__` Method:** Always define a meaningful `__str__` method for your models.
* **Database Migrations:** Generate and apply migrations using `makemigrations` and `migrate`. Do not manually edit migration files after they are created.

## View Layer

* **URL Naming:** Name your URL patterns for easier referencing using the `{% url %}` template tag.
* **Generic Views:** Utilize Django's generic display, edit, and form views where applicable to reduce boilerplate.
* **Security:** Always consider security when handling user input. Use Django's built-in forms and authentication/authorization features.

## Template Layer

* **Template Inheritance:** Use template inheritance (`{% extends %}`, `{% block %}`) for consistent layouts.
* **Template Tags and Filters:** Leverage Django's built-in template tags and filters. Create custom ones for reusable logic.
* **Avoid Logic in Templates:** Keep templates focused on presentation. Complex logic should reside in views or custom template tags.

## Forms

* **Django Forms:** Use Django's `Form` or `ModelForm` classes for handling form data validation and rendering.

## Security Considerations

* **CSRF Protection:** Ensure CSRF protection is enabled (`{% csrf_token %}` in forms).
* **SQL Injection:** Always use Django ORM or parameterized queries to prevent SQL injection.
* **XSS Protection:** Django templates automatically escape HTML, but be mindful of raw output.
* **User Authentication:** Use Django's built-in `auth` system for user authentication and authorization.

## Example Code Snippets (Illustrative)

### Example: Model Definition

```python
# myapp/models.py
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=200)
    description = models.TextField(blank=True, null=True)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name